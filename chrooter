#!/bin/bash

CHROOTER_DIR="$HOME/.chrooter"
INSTALLED="$CHROOTER_DIR/installed.txt"
TOOLING="$CHROOTER_DIR/tools"

DEBOOTSTRAPDIR="$TOOLING/debootstrap"
DEBOOTSTRAP="DEBOOTSTRAP_DIR=$DEBOOTSTRAPDIR/usr/share/debootstrap $DEBOOTSTRAPDIR/usr/sbin/debootstrap"
DEBOOTSTRAP_URL='http://ftp.debian.org/debian/pool/main/d/debootstrap/debootstrap_1.0.115_all.deb'

ARCH_BOOTSTRAP_DIR="$TOOLING/arch-bootstrap"
ARCH_BOOTSTRAP_URL='https://raw.githubusercontent.com/tokland/arch-bootstrap/master/arch-bootstrap.sh'
ARCH_BOOTSTRAP="$ARCH_BOOTSTRAP_DIR/arch-bootstrap.sh"

function arch_install_bootstrapper()
{
echo "Installing Arch bootstrapper"
curl --create-dirs -Lo "$ARCH_BOOTSTRAP" "$ARCH_BOOTSTRAP_URL"
chmod +x "$ARCH_BOOTSTRAP"
}

function arch_install()
{
if [[ ! -f "$ARCH_BOOTSTRAP" ]] ; then
	arch_install_bootstrapper
fi

echo "Installing Arch..."
sudo bash -c "'${ARCH_BOOTSTRAP}' -a x86_64 '$1'"
}

function debian_install_debootstrap()
{
if ! wget -V > /dev/null 2>&1 ; then
    echo "Please install wget. Required for debootstrap"
    exit 1
fi

local curdir tmpdir
echo "Installing debootstrap"
tmpdir=$(mktemp -d)
cd $tmpdir
curl -Lo debootstrap.deb "$DEBOOTSTRAP_URL"
ar x debootstrap.deb
mkdir "$DEBOOTSTRAPDIR"
cp data.tar.gz "$DEBOOTSTRAPDIR"
curdir=$(pwd)
cd "$DEBOOTSTRAPDIR"
sudo tar -xf data.tar.gz
sudo rm -f data.tar.gz
cd $curdir
rm -rf $tmpdir
}

function debian_install()
{
if ! (bash -c "$DEBOOTSTRAP --version" > /dev/null 2>&1) ; then
    debian_install_debootstrap
fi

echo "Installing Debian..."
sudo bash -c "${DEBOOTSTRAP} --arch amd64 buster '$1' http://ftp.uk.debian.org/debian/"

sudo echo -n '' # just to ensure we still have sudo
echo -n "Writing Debian sources file..."
sudo bash -c "cat > '$1/etc/apt/sources.list'" << EOF
deb http://ftp.uk.debian.org/debian/ buster main non-free contrib
deb-src http://ftp.uk.debian.org/debian/ buster main non-free contrib

deb http://security.debian.org/ buster/updates main non-free contrib
deb-src http://security.debian.org/ buster/updates main non-free contrib

deb http://ftp.uk.debian.org/debian/ buster-updates main non-free contrib
deb-src http://ftp.uk.debian.org/debian/ buster-updates main non-free contrib
EOF
echo " Done!"

echo -n "Copying across hostname..."
sudo cp /etc/hostname "$1/etc/hostname"
echo " Done!"

mount_filesystems "$1"

echo "Performing initial package updates within chroot..."
sudo chroot "$1" /bin/bash -c 'apt-get update && apt-get dist-upgrade -y'
sudo chroot "$1" /bin/bash -c 'apt-get install -y locales'
sudo chroot "$1" /bin/bash -c '/usr/sbin/dpkg-reconfigure locales'
sudo chroot "$1" /bin/bash -c 'apt-get install -y nano sudo ncurses-term git curl wget'

echo "Creating group wheel"
sudo chroot "$1" /bin/bash -c "/usr/sbin/groupadd wheel"

echo "Adding group wheel to sudoers"
sudo chroot "$1" /bin/bash -c "echo '%wheel ALL=(ALL) ALL' >> /etc/sudoers"

echo "Creating user: $USER"
sudo chroot "$1" /bin/bash -c "/usr/sbin/useradd -m -g users -G sudo -s /bin/bash $USER"

echo "Please enter a password for $USER..."
sudo chroot "$1" /bin/bash -c "passwd $USER"
echo "Done!"

unmount_filesystems "$1"
}

function mount_filesystems()
{
sudo echo -n '' # just to ensure we still have sudo
echo -n "Mounting filesystems..."
if (mount | grep "$1" > /dev/null 2>&1) ; then
	echo " Already mounted!"
else
	sudo mount -t proc /proc "$1/proc"
	sudo mount -t sysfs /sys "$1/sys"
	sudo mount -o bind /dev "$1/dev"
	sudo mount -o bind /dev/pts "$1/dev/pts"
	echo " Done!"
fi
}

function unmount_filesystems()
{
sudo echo -n '' # just to ensure we still have sudo
echo -n "Unmounting filesystems..."
if (ps a | grep -e "sudo chroot $1 /bin/bash -c su.*--login$" > /dev/null 2>&1) ; then
	echo " User still logged in!"
else
	sudo umount "$1/proc"
	sudo umount "$1/sys"
	sudo umount "$1/dev/pts"
	sudo umount "$1/dev"
	echo " Done!"
fi
}

function enter_chroot()
{
mount_filesystems "$1"
sudo chroot "$1" /bin/bash -c "su $USER --login"
unmount_filesystems "$1"
}

function main()
{

if [[ "$1" == "" ]] ; then
	echo "Please supply a chroot directory!"
	exit 1
fi

if [[ ! -d "$1" ]] ; then
	echo "Creating directory: $1"
	mkdir -p "$1"
	if [[ "$2" == "--install" ]] ; then
	case "$3" in
		debian)
			debian_install "$1"
			;;
		arch)
			arch_install "$1"
			;;
	esac
	fi
fi
}

if [ "`id -u`" -eq 0 ] ; then
	echo "Please do not run this script as root."
	exit 1
fi

if [[ "$HOME" == "" ]] ; then
	echo "User home directory needs to be set via HOME env variable to run this script"
	exit 1
fi

if [[ ! -d "$CHROOTER_DIR" ]] ; then mkdir "$CHROOTER_DIR" ; fi
if [[ ! -d "$TOOLING" ]] ; then mkdir "$TOOLING" ; fi

main "$@"
